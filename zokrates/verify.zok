from "./decrypt" import main as decrypt
from "./brute" import main as brute
from "ecc/edwardsOnCurve" import main as is_on_curve
from "ecc/babyjubjubParams" import BABYJUBJUB_PARAMS


/*
* D -> number of features
*/
def main<D>(private field[2][D] C, field[2][D] R, field[2] Pk, private field[D][2] M, private field[D] m, private field random) -> bool:
	bool out = true
	field[2] random_point = [0, 0]
	for u32 i in 0..D do
		// check the point is on the curve 
		out = out && is_on_curve([C[0][i], C[1][i]], BABYJUBJUB_PARAMS)
		out = out && is_on_curve([R[0][i], R[1][i]], BABYJUBJUB_PARAMS)
		// check true decryption
		out = out && (decrypt([C[0][i],C[1][i]],[R[0][i],R[1][i]], Pk,M[i],random))
		// check if voter's vote is valid
		out = out && (brute(M[i],m[i]))
	endfor
	return out

