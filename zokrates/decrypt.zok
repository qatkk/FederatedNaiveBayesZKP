import "ecc/edwardsAdd" as add
import "ecc/edwardsNegate" as neg
import "ecc/edwardsScalarMult" as multiply
import "utils/pack/bool/nonStrictUnpack256" as unpack256
from "ecc/babyjubjubParams" import BABYJUBJUB_PARAMS

/// Arguments:
///    C: Curve point. random.PublicKey + M.
///    s: Field element. Private key(secret in field).
///    context: Curve parameters (including generator G) used to create keypair.
///    rG: totalVotesR. random multiply generator G. (X)
///    M: Curve point. Decrypted Message
///
/// Returns:
///     Return true for correct decryption, false otherwise.

def main(field[2] C, field[2] R,  field[2] public_key, field[2] M, field random) -> (bool):
    // load BabyJubJub context
    field[2] G = [BABYJUBJUB_PARAMS.Gu, BABYJUBJUB_PARAMS.Gv]
    bool[256] randBits = unpack256(random)

    // correct decryption
    field[2] ptExp2 = multiply(randBits, public_key, BABYJUBJUB_PARAMS)
    field[2] Mes = add(C, neg(ptExp2), BABYJUBJUB_PARAMS)

    // check decrypted Message is equal with input Message
    bool out = if M[0] == Mes[0] && M[1] == Mes[1] then true else false fi
    out = out && if R[0] == ptExp2[0] && R[1] == ptExp2[1] then true else false fi

    return out
//    return ptExp2
