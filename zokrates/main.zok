import "ecc/babyjubjubParams" as context
from "ecc/babyjubjubParams" import BabyJubJubParams
import "./u32_array_to_u64_array" as u32_array_to_u64_array
import "./u32_array_to_field_array" as u32_array_to_field
import "hashes/keccak/256bit" as hash
import "./verify" as encryption_check


def mean<N>(u32[N] a, u32 dataPoints ) -> u32:
    u32 res = 0
    for u32 i in 0..N do
        res = if i >= dataPoints then res else res + a[i] fi 
    endfor
    return (res / dataPoints)

def var<N>(u32[N] a, u32 mu, u32  accuracy, u32 dataPoints) -> u32:
    u32 res = 0
    u32 r = 0
    for u32 i in 0..N do
        r = if a[i] > mu then a[i] - mu else mu - a[i] fi 
        r = if i >= dataPoints then 0 else r fi 
        res = res + (r*r)
    endfor
    return (res/ dataPoints)

def naivebayes<D, N>( u32[D][N] data, u32[D] mu, u32[D] sigma, u32 accuracy, u32 dataPoints ) -> bool:
    bool out = true
    for u32 i in 0..D do
        out = out && (mu[i] <= mean(data[i], dataPoints) + (accuracy/100)  && mu[i] >= mean(data[i], dataPoints) - (accuracy/100))
    endfor
    for u32 i in 0..D do
      out = out && (sigma[i] <= var(data[i], mu[i], accuracy, dataPoints) + (accuracy/100)* (accuracy/100)) && (sigma[i] >= var(data[i], mu[i], accuracy, dataPoints) - (accuracy/100)* (accuracy/100))
    endfor
    return out


def main(private u32[15][100] data, private u32[15] mu, private u32[15] sigma, private u32 dataPoints, u32 accuracy, private field[15][2] mean_M, field[15] mean_R_x, private field[15] mean_R_y, field[15] mean_C_x, private field[15] mean_C_y, private field[15][2] var_M, field[15] var_R_x, private field[15] var_R_y, field[15] var_C_x, private field[15] var_C_y, field[2] Pk, private field random) -> bool :
    bool out = true
    field[15] mu_in_field = u32_array_to_field(mu)
    field[15] sigma_in_field = u32_array_to_field(sigma)
    out = out && naivebayes::<15,100>(data, mu, sigma, accuracy, dataPoints)
    out = out && encryption_check::<15> ([mean_C_x, mean_C_y], [mean_R_x, mean_R_y], Pk, mean_M, mu_in_field, random)
    out = out && encryption_check::<15> ([var_C_x, var_C_y], [var_R_x, var_R_y], Pk, var_M, sigma_in_field, random)
    assert(out)
    return out