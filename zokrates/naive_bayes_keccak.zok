import "ecc/babyjubjubParams" as context
from "ecc/babyjubjubParams" import BabyJubJubParams

import "./u32_array_to_u64_array" as u32_array_to_u64_array
import "./verifyEddsa_keccak" as verifyEddsa_keccak
import "hashes/keccak/256bit.zok" as hash

def mean<N>(u32[N] a) -> u32:
    u32 res = 0
    for u32 i in 0..N do
        res = res + a[i]
    endfor
    return (res / N)

def var<N>(u32[N] a, u32 mu, u32 accuracy, u32 dataPoints) -> u32:
    u32 res = 0
    for u32 i in 0..N do
        u32 r = (res - mu)
        res = res + (r*r)
    endfor
    return (res / dataPoints -1 ) / accuracy

def naivebayes<D, N>(private u32[D][N] data, u32[D] mu, u32[D] sigma, u32 accuracy, u32[D] dataPoints ) -> bool[2]:
    bool outMean = true
     outVar = 0  
    for u32 i in 0..D do
        outMean = outMean && (mu[i] == mean(data[i]))
    endfor
    for u32 i in 0..D do
        outVar[i] = outVar && (sigma[i] == var(data[i], mu[i], accuracy, dataPoints[i]))
    endfor
    return [outMean, outVar]

def main(private u32[4][22] data, u32[4] mu, u32[4] sigma, u32 accuracy, u32[4]dataPoints) -> bool[2]:
    bool[2] out = [true, true]
    out = naivebayes::<4,20>(data, mu, sigma, accuracy, dataPoints)
    return out